class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for(int i = 0;i<nums.size();i++) {
            int newTag = target - nums[i];
                for(int j = 0;j<nums.size();j++){
                    if(j != i && nums[j] == newTag) {                       
                        ans.push_back(i);
                        ans.push_back(j);
                        return ans;
                    }
                }
        }
        return ans;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* h = new ListNode(0);
        ListNode* p = h;
        int temp = 0; // 进位
        while(l1 != NULL && l2 != NULL) {
            p->next = new ListNode((temp + l1->val + l2->val)%10);
            temp = (temp + l1->val + l2->val)/10;
            l1 = l1->next;
            l2 = l2->next;
            p = p->next;
        }
        while(l1 != NULL ) {
            p->next = new ListNode((temp + l1->val)%10);
            temp = (temp + l1->val)/10;
            l1 = l1->next;
            p = p->next;
        }
        while(l2 != NULL ) {
            p->next = new ListNode((temp + l2->val)%10);
            temp = (temp + l2->val)/10;
            l2 = l2->next;
            p = p->next;
        }
        if(temp) {
            p->next = new ListNode(temp);
            p = p->next;
        }
        return h->next;
    }
};

