class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for(int i = 0;i<nums.size();i++) {
            int newTag = target - nums[i];
                for(int j = 0;j<nums.size();j++){
                    if(j != i && nums[j] == newTag) {                       
                        ans.push_back(i);
                        ans.push_back(j);
                        return ans;
                    }
                }
        }
        return ans;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* h = new ListNode(0);
        ListNode* p = h;
        int temp = 0; // 进位
        while(l1 != NULL && l2 != NULL) {
            p->next = new ListNode((temp + l1->val + l2->val)%10);
            temp = (temp + l1->val + l2->val)/10;
            l1 = l1->next;
            l2 = l2->next;
            p = p->next;
        }
        while(l1 != NULL ) {
            p->next = new ListNode((temp + l1->val)%10);
            temp = (temp + l1->val)/10;
            l1 = l1->next;
            p = p->next;
        }
        while(l2 != NULL ) {
            p->next = new ListNode((temp + l2->val)%10);
            temp = (temp + l2->val)/10;
            l2 = l2->next;
            p = p->next;
        }
        if(temp) {
            p->next = new ListNode(temp);
            p = p->next;
        }
        return h->next;
    }
};
// 3
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.length() < 1) {
            return 0;
        }
        int start = 0;
        int end = 0;
        int maxLen = end - start + 1;
        int flag = 0;
        int pos = 0;
        
        for(int i = 1;i<s.length();i++) {
            for(int j = start;j<=end;j++) {
                if(s.substr(i,1) == s.substr(j,1)){
                    flag = 1;
                    pos = j;
                }
            }
            if(flag == 0) {
                end++;
                if(end - start + 1 > maxLen) {
                    maxLen = end - start + 1;
                }
            }else {
                start = pos+1;
                end = i;
                flag = 0;
            }
        }
        return maxLen;
    }
};
// 5
class Solution {
public:
    string midToSide (string s, int left, int right) {
        while(left>=0 && right <s.length() && s.substr(left,1) == s.substr(right,1)) {
            left--;
            right++;
        }
        return s.substr(left + 1, right-left-1);
    }
    string longestPalindrome(string s) {
        int len = s.length();
        if(len < 1) {
            return s;
        }
        string cmp = s.substr(0,1);
        for(int i = 0;i<s.length();i++) {
            string temp = midToSide(s,i,i);
            if(temp.length() >= cmp.length()) {
                cmp = temp;
            }
            temp = midToSide(s,i,i+1);
            if(temp.length() >= cmp.length()) {
                cmp = temp;
            }
        }
        return cmp;
    }
};

// 6
class Solution {
public:
    string convert(string s, int numRows) {
        if(s.length() <= 1 || numRows == 1) {
            return s;
        }
        int nr = numRows - 1;
        string sn = "";
        for(int i = 0;i<numRows;i++) {
            for(int j = i;j<s.length();j = j+2*nr) {
                sn = sn + s.substr(j,1);
                if(i != 0 && i != nr && j+(nr - i)*2<s.length()) {                  
                    sn = sn + s.substr(j+(nr - i)*2,1);
                }
            } 
        }
        return sn;
    }
};
